{"version":3,"file":"static/js/44.b90d6712.chunk.js","mappings":"mMAEO,MAAMA,EAAaC,EAAAA,GAAOC,KAAK;;;;;;EAQzBC,EAAUF,EAAAA,GAAOG,MAAM;;;;;eCNpC,MA6BA,EA7BwBC,KACtB,MAAO,CAAEC,IAAmBC,EAAAA,EAAAA,MAa5B,OACEC,EAAAA,EAAAA,MAAA,QAAMC,SAZaC,IACnBA,EAAEC,iBACF,MAAMC,EAAaF,EAAEG,OAAOC,SAASC,OAAOC,MAAMC,OAElDX,EAAgB,CAAEY,MAAON,GAAa,EAQTO,SAAA,EAC3BC,EAAAA,EAAAA,KAACpB,EAAU,CACTqB,KAAK,OACLC,KAAK,SAGLC,YAAY,sBACZC,UAAQ,KAEVJ,EAAAA,EAAAA,KAACjB,EAAO,CAACkB,KAAK,SAAQF,SAAC,aAClB,E,sBCvBX,MAAMM,EACE,OADFA,EAEK,UAFLA,EAGM,WAHNA,EAIM,WAkEZ,EA/DwBC,KACtB,MAAOC,IAAgBpB,EAAAA,EAAAA,OAChBqB,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,KAC9BC,EAAQC,IAAaF,EAAAA,EAAAA,UAASL,GAC/BQ,GAAWC,EAAAA,EAAAA,MAsCjB,OApCAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAeT,EAAaU,IAAI,SAEhBC,WACpB,GAAKF,EAAL,CACAJ,EAAUP,GAEV,IACE,MAAMc,QAAaC,EAAAA,EAAAA,IAAkBJ,GAKrC,GAJAP,EAAUU,GACVP,EAAUP,GAGU,IAAhBc,EAAKE,OAIP,OAHAZ,EAAU,SAEVG,EAAUP,EAGd,CAAE,MAAOiB,GACPV,EAAUP,EAEZ,CAlByB,CAkBzB,EAGFkB,EAAe,GACd,CAAChB,KAEJQ,EAAAA,EAAAA,YAAU,KACRP,GAAUI,EAAUP,EAAgB,GACnC,CAACG,KAOFpB,EAAAA,EAAAA,MAAA,OAAAW,SAAA,EACEC,EAAAA,EAAAA,KAACf,EAAe,IACf0B,IAAWN,IAAkBL,EAAAA,EAAAA,KAACwB,EAAAA,EAAM,KACrCxB,EAAAA,EAAAA,KAAA,MAAAD,SACGS,EAAOa,OAAS,EACfb,EAAOiB,KAAIC,IAAA,IAAC,GAAEC,EAAE,MAAEC,GAAOF,EAAA,OACvB1B,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAAC6B,EAAAA,GAAI,CAACC,GAAI,GAAGH,IAAMI,MAAO,CAAEC,KAAMnB,GAAWd,SAC1C6B,GAAgB,eAFZD,EAIJ,KAGP3B,EAAAA,EAAAA,KAAA,KAAAD,SAAG,wBAGH,C","sources":["components/MovieSearchForm/MovieSearchForm.styled.js","components/MovieSearchForm/MovieSearchForm.jsx","pages/MovieSearchPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MovieInput = styled.input`\n  width: 400px;\n  padding: 5px 10px;\n  margin-right: 5px;\n  border-radius: 5px;\n  border: 1px solid #ccc;\n`;\n\nexport const FormBtn = styled.button`\n  padding: 5px 10px;\n  border-radius: 5px;\n  border: 1px solid #ccc;\n  font-weight: 600;\n`;\n","import React from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { FormBtn, MovieInput } from './MovieSearchForm.styled';\n\nconst MovieSearchForm = () => {\n  const [, setSearchParams] = useSearchParams();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const queryValue = e.target.elements.search.value.trim(); // Получаем значение поля\n\n    setSearchParams({ query: queryValue }); // Передаем значение как строку\n  };\n\n  // const handleInput = e => {\n  //   setQuery(e.target.value.toLowerCase().trim());\n  // };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <MovieInput\n        type=\"text\"\n        name=\"search\"\n        // value={query}\n        // onChange={handleInput}\n        placeholder=\"Enter movie name...\"\n        required\n      />\n      <FormBtn type=\"submit\">Search</FormBtn>\n    </form>\n  );\n};\n\nexport default MovieSearchForm;\n","import Loader from 'components/Loader/Loader';\nimport MovieSearchForm from 'components/MovieSearchForm/MovieSearchForm';\nimport React, { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { fetchSearchMovies } from 'services/api';\n\nconst STATUS = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n\nconst MovieSearchPage = () => {\n  const [searchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const [status, setStatus] = useState(STATUS.IDLE);\n  const location = useLocation();\n\n  useEffect(() => {\n    const currentQuery = searchParams.get('query');\n\n    const searchMovieId = async () => {\n      if (!currentQuery) return;\n      setStatus(STATUS.PENDING);\n\n      try {\n        const data = await fetchSearchMovies(currentQuery);\n        setMovies(data);\n        setStatus(STATUS.RESOLVED);\n        // setError('');\n\n        if (data.length === 0) {\n          setMovies([]);\n          // setError(\"No movies found.\");\n          setStatus(STATUS.REJECTED);\n          return;\n        }\n      } catch (error) {\n        setStatus(STATUS.REJECTED);\n        // setError(error.message);\n      }\n    };\n\n    searchMovieId();\n  }, [searchParams]);\n\n  useEffect(() => {\n    movies && setStatus(STATUS.RESOLVED);\n  }, [movies]);\n\n  // if (movies.length === 0) {\n  //   return <p>We don't have any movie.</p>;\n  // }\n\n  return (\n    <div>\n      <MovieSearchForm />\n      {status === STATUS.PENDING && <Loader />}\n      <ul>\n        {movies.length > 0 ? (\n          movies.map(({ id, title }) => (\n            <li key={id}>\n              <Link to={`${id}`} state={{ from: location }}>\n                {title ? title : 'No tittle'}\n              </Link>\n            </li>\n          ))\n        ) : (\n          <p>No movies found</p>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default MovieSearchPage;\n"],"names":["MovieInput","styled","input","FormBtn","button","MovieSearchForm","setSearchParams","useSearchParams","_jsxs","onSubmit","e","preventDefault","queryValue","target","elements","search","value","trim","query","children","_jsx","type","name","placeholder","required","STATUS","MovieSearchPage","searchParams","movies","setMovies","useState","status","setStatus","location","useLocation","useEffect","currentQuery","get","async","data","fetchSearchMovies","length","error","searchMovieId","Loader","map","_ref","id","title","Link","to","state","from"],"sourceRoot":""}